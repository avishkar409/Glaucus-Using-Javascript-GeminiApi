import { useEffect, useState, useRef } from "react";
import { useRouter } from "next/router";
import { auth, db } from "../lib/firebase";
import { collection, getDocs, query, orderBy, doc, deleteDoc } from "firebase/firestore";
import { onAuthStateChanged } from "firebase/auth";
import { jsPDF } from "jspdf";
import { toast } from "react-hot-toast";
import { FiTrash2, FiDownload, FiSearch } from "react-icons/fi";

export default function HistoryPage() {
  const [userEmail, setUserEmail] = useState(null);
  const [detections, setDetections] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const contentRef = useRef(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setUserEmail(user.email);
        await fetchUserDetections(user.email);
        setLoading(false);
      } else {
        router.replace("/login");
      }
    });
    return () => unsubscribe();
  }, []);

  const fetchUserDetections = async (email) => {
    try {
      const q = query(collection(db, "detections"), orderBy("timestamp", "desc"));
      const snapshot = await getDocs(q);
      const docs = snapshot.docs
        .map((doc) => ({ id: doc.id, ...doc.data() }))
        .filter((doc) => doc.userEmail === email);
      setDetections(docs);
      setFiltered(docs);
    } catch (error) {
      toast.error("Failed to fetch detections");
      console.error(error);
    }
  };

  useEffect(() => {
    const lower = search.toLowerCase();
    const results = detections.filter(
      (d) =>
        d.imageName?.toLowerCase().includes(lower) ||
        d.result?.toLowerCase().includes(lower)
    );
    setFiltered(results);
  }, [search, detections]);

  const deleteDetection = async (id) => {
    if (window.confirm("Are you sure you want to delete this record?")) {
      try {
        await deleteDoc(doc(db, "detections", id));
        setDetections(detections.filter((d) => d.id !== id));
        toast.success("Record deleted successfully");
      } catch (error) {
        toast.error("Failed to delete record");
        console.error(error);
      }
    }
  };

  const exportToPDF = (detection) => {
    const doc = new jsPDF();
    const margin = 20;
    const pageWidth = doc.internal.pageSize.getWidth();
    const usableWidth = pageWidth - margin * 2;
    let y = margin;

    // Title
    doc.setFontSize(18);
    doc.setTextColor(0, 102, 204); // Blue
    doc.text("üêü Glaucus - Fish Detection Report", margin, y);

    y += 10;

    // Divider
    doc.setDrawColor(180);
    doc.line(margin, y, pageWidth - margin, y);
    y += 10;

    // Image
    if (detection.imageData) {
        try {
        const imgData = `data:image/jpeg;base64,${detection.imageData}`;
        doc.addImage(imgData, "JPEG", margin, y, 80, 60);
        } catch (error) {
        console.error("Error adding image to PDF:", error);
        }
    }

    // Info section (to the right of image)
    const infoX = margin + 90;
    const infoY = y + 5;
    const lineHeight = 8;

    doc.setFontSize(12);
    doc.setFont(undefined, "bold");
    doc.text("Image Name:", infoX, infoY);
    doc.setFont(undefined, "normal");
    doc.text(detection.imageName || "N/A", infoX, infoY + lineHeight);

    doc.setFont(undefined, "bold");
    doc.text("Date:", infoX, infoY + lineHeight * 2);
    doc.setFont(undefined, "normal");
    doc.text(
        detection.timestamp?.toDate().toLocaleString() || "N/A",
        infoX,
        infoY + lineHeight * 3
    );

    y += 70;

    // Detection Result
    doc.setFontSize(13);
    doc.setFont(undefined, "bold");
    doc.setTextColor(33, 33, 33);
    doc.text("üß† AI Detection Result:", margin, y);

    y += 8;

    doc.setFontSize(11);
    doc.setFont(undefined, "normal");
    doc.setTextColor(0);
    const resultText = detection.result || "N/A";
    const wrappedText = doc.splitTextToSize(resultText, usableWidth); // ‚úÖ wrap to fit page
    doc.text(wrappedText, margin, y);

    y += wrappedText.length * 6 + 10;

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(120);
    doc.text(
        "Generated by Glaucus ‚Äì your lovable marine AI assistant üê†",
        margin,
        doc.internal.pageSize.getHeight() - 10
    );

    // Save the PDF
    doc.save(`Glaucus_Report_${detection.id}.pdf`);
    };


  if (loading) return (
    <div className="flex justify-center items-center h-64">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );

  return (
    <div className="p-4 md:p-8" ref={contentRef}>
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <h1 className="text-2xl font-bold text-blue-700 mb-4 md:mb-0">Detection History</h1>
        
        <div className="relative w-full md:w-64">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="text-gray-400" />
          </div>
          <input
            type="text"
            placeholder="Search by fish name or result..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
      </div>

      {filtered.length === 0 ? (
        <div className="bg-gray-50 rounded-lg p-8 text-center">
          <p className="text-gray-500">{search ? "No matching records found" : "No detection history available"}</p>
        </div>
      ) : (
        <div className="space-y-4">
          {filtered.map((det) => (
            <div
              key={det.id}
              className="bg-white shadow rounded-lg p-4 hover:shadow-md transition-shadow"
            >
              <div className="flex flex-col md:flex-row gap-4">
                {det.imageData && (
                  <div className="flex-shrink-0">
                    <img
                      src={`data:image/jpeg;base64,${det.imageData}`}
                      alt={det.imageName}
                      className="w-full md:w-48 h-48 object-cover rounded-lg border"
                    />
                  </div>
                )}
                
                <div className="flex-1">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800">{det.imageName}</h3>
                      <p className="text-gray-600 mt-1">{det.result}</p>
                      <p className="text-sm text-gray-500 mt-2">
                        {det.timestamp?.toDate().toLocaleString()}
                      </p>
                    </div>
                    
                    <div className="flex space-x-2">
                      <button
                        onClick={() => exportToPDF(det)}
                        className="p-2 text-blue-600 hover:bg-blue-50 rounded-full transition-colors"
                        title="Export to PDF"
                      >
                        <FiDownload size={18} />
                      </button>
                      <button
                        onClick={() => deleteDetection(det.id)}
                        className="p-2 text-red-600 hover:bg-red-50 rounded-full transition-colors"
                        title="Delete record"
                      >
                        <FiTrash2 size={18} />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}